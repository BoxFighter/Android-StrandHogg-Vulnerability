package com.testt;

import android.Manifest;
import android.app.usage.NetworkStats;
import android.app.usage.NetworkStatsManager;
import android.app.usage.UsageStats;
import android.app.usage.UsageStatsManager;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.drawable.Drawable;
import android.net.ConnectivityManager;
import android.net.TrafficStats;
import android.os.Build;
import android.os.RemoteException;
import android.os.SystemClock;
import android.support.annotation.RequiresApi;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.Log;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import static android.content.Context.USAGE_STATS_SERVICE;

public class ApkTool {
    public final static int REQUEST_READ_PHONE_STATE = 1;
    public static ExecutorService fixedThreadPool = Executors.newFixedThreadPool(20);
    public static List<String> myAppInfos = new ArrayList<String>();
    public static PackageInfo packageInfo=null;
    public static ApplicationInfo applicationInfo=null;
    public static PackageManager packageManager;
    public static Context context;
    private static CountDownLatch cdl ;//数值是计数器初始值
    private static ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(30, Integer.MAX_VALUE,1, TimeUnit.SECONDS, new LinkedBlockingDeque<Runnable>());

    @RequiresApi(api = Build.VERSION_CODES.M)
    public static List<String> scanLocalInstallAppInfoList(PackageManager packageManager1, Context context1) {

        packageManager=packageManager1;
        context=context1;

        try {
            myAppInfos.clear();
            //Calendar beginCal = Calendar.getInstance();
            //beginCal.add(Calendar.DAY_OF_WEEK, -3);
            //Calendar endCal = Calendar.getInstance();
            UsageStatsManager manager=(UsageStatsManager)context.getSystemService(USAGE_STATS_SERVICE);
            //String str = String.format("%tF %<tT", beginCal.getTimeInMillis());
            //String str1 = String.format("%tF %<tT", endCal.getTimeInMillis());
            StringBuilder sb=new StringBuilder();

            //获取应用相关信息
            final List<PackageInfo> packageInfos = packageManager.getInstalledPackages(0);
            cdl=new CountDownLatch(packageInfos.size());
            for (int i = 0; i < packageInfos.size(); i++) {
                final int index=i;
                packageInfo = packageInfos.get(index);
                applicationInfo = packageInfo.applicationInfo;
                //过滤掉系统app
                if ((ApplicationInfo.FLAG_SYSTEM & packageInfo.applicationInfo.flags) != 0) {
                    cdl.countDown();
                    continue;
                }

                Runnable threadsRunnable=new Runnable() {
                    @Override
                    public void run() {
                        //Log.e("序号", String.valueOf(index));
                        packageInfo = packageInfos.get(index);
                        applicationInfo = packageInfo.applicationInfo;
                        long firstInstallTime = packageInfo.firstInstallTime;// 应用第一次安装的时间
                        //int versionCode = packageInfo.versionCode;// 应用现在的版本号
                        //String versionName = packageInfo.versionName;// 应用现在的版本名称
                        //long lastUpdateTime = packageInfo.lastUpdateTime;// 最后一次更新时间

                        //String name = applicationInfo.name;// Application类名
                        String packageName = applicationInfo.packageName;// 包名
                        int uid = applicationInfo.uid;
                        String applicationName = (String) packageManager.getApplicationLabel(applicationInfo);//应用名称

                        //Log.e("应用名称", applicationName);
                        //数据隔离
                        synchronized (this){
                            //为item赋值
                            myAppInfos.add(applicationName+":"+packageName);
                            cdl.countDown();
                        }
                        //SystemClock.sleep(1000);
                            }
                        //});

                 //   }
                };
                poolExecutor.execute(threadsRunnable);
            }
        } catch (Exception e) {
            Log.e("Steven", "===============获取应用包信息失败");
            Log.e("Steven", e.toString());
            e.printStackTrace();
        }
        try{
            cdl.await();
        }catch (InterruptedException e){
            e.printStackTrace();
        }

        return myAppInfos;
    }
}